# Generated by Django 3.0.8 on 2020-08-15 08:55

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import tournament.models.enums
import tournament.models.tournament
import tournament.models.utils
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Battle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.IntegerField(choices=[(2, 'TWO'), (3, 'THREE'), (4, 'FOUR')], default=tournament.models.enums.BattleSize['TWO'])),
                ('is_determined', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('id', models.SlugField(default=tournament.models.utils.generate_random_hash, primary_key=True, serialize=False, unique=True)),
                ('description', models.CharField(max_length=255)),
                ('title', models.CharField(max_length=255)),
                ('password', models.CharField(blank=True, max_length=32, null=True)),
                ('privacy', models.IntegerField(choices=[(1, 'PRIVATE'), (2, 'PUBLIC'), (3, 'FRIENDS')], default=tournament.models.enums.TournamentPrivacy['PUBLIC'])),
                ('is_nsfw', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=20)),
                ('email', models.CharField(max_length=255)),
                ('admin', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TournamentPhoto',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('photo', models.FileField(upload_to=tournament.models.tournament.tournament_photo_directory)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Tournament')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='tournament',
            name='creator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tournament.User'),
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('bracket_size', models.IntegerField(choices=[(4, 'FOUR'), (8, 'EIGHT'), (16, 'SIXTEEN'), (32, 'THIRTYTWO'), (64, 'SIXTYFOUR')], default=tournament.models.enums.BracketTypes['SIXTEEN'])),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tournament.User')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]

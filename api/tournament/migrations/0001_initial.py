# Generated by Django 3.0.8 on 2020-08-22 05:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
import tournament.models.enums
import tournament.models.tournament
import tournament.models.utils
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('sessions', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=20, unique=True)),
                ('email', models.CharField(max_length=255, unique=True)),
                ('admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('bracket_size', models.IntegerField(choices=[(1, 'ONE'), (2, 'TWO'), (4, 'FOUR'), (8, 'EIGHT'), (16, 'SIXTEEN'), (32, 'THIRTYTWO'), (64, 'SIXTYFOUR')])),
                ('curr_round', models.IntegerField(choices=[(1, 'ONE'), (2, 'TWO'), (4, 'FOUR'), (8, 'EIGHT'), (16, 'SIXTEEN'), (32, 'THIRTYTWO'), (64, 'SIXTYFOUR')])),
                ('curr_battle', models.IntegerField(default=0)),
                ('is_gameend', models.BooleanField(default=False)),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='sessions.Session')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('url', models.URLField(default=tournament.models.utils.generate_random_hash, unique=True)),
                ('avatar', models.FileField(blank=True, null=True, upload_to=tournament.models.tournament.tournament_avatar_directory)),
                ('description', models.CharField(max_length=255)),
                ('title', models.CharField(max_length=255)),
                ('password', models.CharField(blank=True, max_length=32, null=True)),
                ('privacy', models.IntegerField(choices=[(1, 'PRIVATE'), (2, 'PUBLIC'), (3, 'FRIENDS')], default=tournament.models.enums.TournamentPrivacy['PUBLIC'])),
                ('is_nsfw', models.BooleanField()),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TournamentEntry',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('photo', models.FileField(upload_to=tournament.models.tournament.tournament_photo_directory)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Tournament')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_num', models.IntegerField(choices=[(1, 'ONE'), (2, 'TWO'), (4, 'FOUR'), (8, 'EIGHT'), (16, 'SIXTEEN'), (32, 'THIRTYTWO'), (64, 'SIXTYFOUR')])),
                ('entries', models.ManyToManyField(to='tournament.TournamentEntry')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Game')),
            ],
        ),
        migrations.AddField(
            model_name='game',
            name='tournament',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tournament.Tournament'),
        ),
        migrations.AddField(
            model_name='game',
            name='winner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tournament.TournamentEntry'),
        ),
        migrations.CreateModel(
            name='Battle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entries', models.ManyToManyField(to='tournament.TournamentEntry')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.Round')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wins', to='tournament.TournamentEntry')),
            ],
        ),
    ]
